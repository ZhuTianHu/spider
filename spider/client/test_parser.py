#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import sys
import json
import logging
from traceback import format_exc 

import tornado
from tornado.options import define
from tornado.options import options

from account import Account


def test_parser(options):
    """Test parser

    This module is used to test parser after writing a new parser or adding a new
    task conf, the parse result will be shown on the screen.

    Args:
        task_type: A string of task_type.
        url: A string of url.
        retry: Retry times for test, default 2.
        client: Client module for test, default base_client.

    Retruns:
        status: Parse status
                0: parse success
                1: failed to get page
                2: failed to parse page
        tasks: Results of task urls.
        items: Final Results.
    """
    client_module = __import__(options.client)
    client = client_module.Client()

    task_conf = client.task_db.get_task_conf(options.uid, options.task_type)
    headers = {} if 'headers' not in task_conf else task_conf['headers']
    if task_conf.get('need_login', False):
        account_obj = Account()
        account = account_obj.get_account(options.site_name)
        headers.update(account['headers'])
    render_js = False if 'render_js' not in task_conf else task_conf['render_js']
    use_proxy = False if 'use_proxy' not in task_conf else task_conf['use_proxy']
    status, page_obj = client.download(options.uid, options.task_type, options.url, options.method, options.data, use_proxy, render_js, headers, 5242880) 
    task = {'url': options.url, 'task_type': options.task_type, 'uid': options.uid}

    status, tasks, items = client.parse(page_obj, task, task_conf['task_conf'])
    print "status: %d" % status
    print "------------------------------------------------------------------------"
    if status != 0:
        exit()

    print "task num: %d" % len(tasks)
    for task_type, url in tasks:
        print task_type, url.encode('utf-8')
    print "------------------------------------------------------------------------"

    print "item num: %d" % len(items)
    for item in items:
        item_str = json.dumps(item, ensure_ascii=False).encode("utf-8")
        print item_str
    return (status, tasks, items)


def test_parser_recursively(options):
    """Test parser recursively.

    This will call test_parser recursively if set recursive option as True.
    This will test the task generated by test_parser if the task type of task generated is
    not tested before.
    The parse results will be shown on screen.

    Args:
        task_type: A string of task_type.
        url: A string of url.
        retry: Retry times for test, default 2.
        client: Client module for test, default base_client.

    Retruns:
        status: Parse status
                0: parse success
                1: failed to get page
                2: failed to parse page
        tasks: Results of task urls.
        items: Final Results.
    """
    task_list = [(options.task_type, options.url)]
    task_set = set()
    task_set.add(options.task_type)
    while len(task_list) > 0:
        try:
            task_type, url = task_list.pop()
            options.task_type = task_type
            options.url = url
            print "------------------------------------------------------------------------"
            print "task: %s" %options.task_type
            print "------------------------------------------------------------------------"
            status, tasks, items = test_parser(options)
            for task_type, url in tasks:
                if task_type in task_set:
                    continue
                task_set.add(task_type.encode('utf-8'))
                task_list.append((task_type.encode('utf-8'), url.encode('utf-8')))
        except Exception, e:
            logging.debug(format_exc())
            logging.error("test task: %s, url: %s failed, msg: %s" %(options.task_type, options.url, e))
            print format_exc()
            break


if __name__ == "__main__":
    define("uid", help="uid", type=str)
    define("task_type", help="client task type", type=str)
    define("site_name", help="client site name", type=str)
    define("url", help="url to crawl", type=str)
    define("method", default='GET', help="request method", type=str)
    define("data", default='', help="post data", type=str)
    define("retry", default=2, help="crawl times", type=int)
    define("client", default="base_client", help="client module", type=str)
    define("recursive", default=True, help="whether to test recursively",
           type=bool)

    tornado.options.parse_command_line()
    if options.recursive:
        test_parser_recursively(options)
    else:
        test_parser(options)
